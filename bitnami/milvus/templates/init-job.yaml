{{- /*
Copyright VMware, Inc.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if (include "milvus.init-job.create" .) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.fullname" . }}-init
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "common.images.version" ( dict "imageRoot" .Values.initJob.image "chart" .Chart ) ) }}
  {{- $labels := include "common.tplvalues.merge" ( dict "values" ( list .Values.commonLabels $versionLabel ) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: milvus
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.initJob.annotations "context" $ ) | nindent 4 }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  backoffLimit: {{ .Values.initJob.backoffLimit }}
  template:
    metadata:
      {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.initJob.podLabels .Values.commonLabels $versionLabel ) "context" . ) }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: init
      {{- if .Values.initJob.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.initJob.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "milvus.imagePullSecrets" . | nindent 6 }}
      restartPolicy: OnFailure
      {{- if .Values.initJob.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.initJob.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.initJob.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.initJob.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initJob.enableDefaultInitContainers }}
        {{- include "milvus.waitForProxyInitContainer" . | nindent 8 }}
        {{- end }}
      containers:
        - name: update-credentials
          image: {{ template "milvus.init-job.image" . }}
          imagePullPolicy: {{ .Values.initJob.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
          args:
            - |
              #!/bin/bash
              {{- if .Values.milvus.auth.enabled }}
              echo "Updating credentials"
              # Taken from https://milvus.io/docs/authenticate.md
              python - <<EOF
              # Import libraries
              import os
              from pymilvus import connections
              from pymilvus import utility
              # Authenticate using default root user credentials
              connections.connect(alias='default', host='{{ include "milvus.proxy.fullname" . }}', port='{{ .Values.proxy.service.ports.grpc }}', password='Milvus', user='root')
              # Reset root password
              utility.reset_password('root', 'Milvus', os.environ['MILVUS_ROOT_PASSWORD'], using='default')
              utility.create_user('{{ .Values.milvus.auth.username }}', os.environ['MILVUS_PASSWORD'], using='default')
              EOF
              echo "Credentials updated"
              {{- end }}
              {{- if .Values.initJob.extraCommands }}
              {{- include "common.tplValues.render" (dict "value" .Values.initJob.extraCommands "context" $) | nindent 14 }}
              {{- end }}
          env:
            {{- if .Values.milvus.auth.enabled }}
            - name: MILVUS_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "milvus.secretName" . }}
                  key: {{ include "milvus.secretRootPasswordKey" . }}
            - name: MILVUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "milvus.secretName" . }}
                  key: {{ include "milvus.secretPasswordKey" . }}
            {{- end }}
          {{- if .Values.initJob.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.initJob.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if or .Values.initJob.extraEnvVarsCM .Values.initJob.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.initJob.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.initJob.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.initJob.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.initJob.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          {{- if .Values.initJob.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.initJob.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.initJob.resources }}
          resources: {{- toYaml .Values.initJob.resources | nindent 12 }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
      {{- if .Values.initJob.extraVolumes }}
      {{- include "common.tplvalues.render" (dict "value" .Values.initJob.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
{{- end }}
